{"version":3,"file":"static/js/470.0b4ca642.chunk.js","mappings":"uOAEaA,EAAUC,EAAAA,GAAAA,IAAH,yKCCPC,EAASD,EAAAA,GAAAA,MAAJ,6DACP,gBAAGE,EAAH,EAAGA,MAAH,SAAUC,OAAsBD,EAAME,OAAOC,QAAUH,EAAMI,UAAUC,WAIrER,EAAUC,EAAAA,GAAAA,IAAH,0QAST,SAAAQ,GAAK,OAAIA,EAAMN,MAAMI,UAAUG,SACb,gBAAGP,EAAH,EAAGA,MAAH,SAAUC,OAAsBD,EAAME,OAAOC,QAAUH,EAAMI,UAAUC,W,iBCZvFG,EAAe,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KACxC,GAAiCC,EAAAA,EAAAA,KAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,cAEf,GAA8BC,EAAAA,EAAAA,MAAtBb,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,UACVY,EAAWH,EAAMI,aAAeR,EAEtC,OACE,UAAC,EAAD,CAASS,QAAS,kBAAMJ,GAAc,kBAAKD,GAAN,IAAaI,WAAYR,MAAQR,OAAQe,EAA9E,WACE,SAAC,KAAD,CAAMG,KAAMR,EAAMS,MAAOJ,EAAWd,EAAOC,QAAUC,EAAUC,WAC/D,SAACN,EAAD,CAAOsB,UAAU,oBAAoBpB,OAAQe,EAA7C,SAAwDN,Q,iDCbjDY,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAS,eADF,uBACtBC,EADsB,EACtBA,KADsB,kBAGvBA,GAHuB,2CAAH,qDCc7B,EAbwB,WACtB,OAAiDC,EAAAA,EAAAA,UAAS,CAAC,eAAe,kBAAMH,MAAoB,CAClGI,6BAA6B,EAC7BC,sBAAsB,IAGxB,MAAO,CACLC,WANF,EAAQJ,KAONK,UAPF,EAA0BA,UAQxBC,QARF,EAAqCA,UCE1BC,EAAe,WAC1B,IAAQH,EAAeI,IAAfJ,WAEFK,EAAU,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAYM,KAAI,SAACC,GAAD,OACjC,SAAC3B,GAAD,UAAoC2B,GAAjBA,EAAS1B,OAG9B,OACE,UAACZ,EAAD,YACE,SAACW,EAAD,CAAsBC,GAAE,GAAMC,MAAM,QAAQC,KAAK,YAA9B,GACjBsB,MCOR,EAnBa,WACX,IAAQG,GAAMC,EAAAA,EAAAA,KAAND,EAER,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,KACA,SAAC,KAAD,CACEf,UAAU,OACVd,MAAO6B,EAAE,wCACT/B,QAAS+B,EAAE,iDAEb,SAACL,EAAD,KACA,SAAC,KAAD","sources":["pages/Home/components/CategoryList/styled.ts","pages/Home/components/CategoryItem/styled.ts","pages/Home/components/CategoryItem/index.tsx","services/categories.ts","pages/Home/components/CategoryList/factories/Category.ts","pages/Home/components/CategoryList/index.tsx","pages/Home/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.nav`\n  width: 100%;\n  display: flex;\n  gap: 60px;\n  overflow: scroll;\n  \n  @media(max-width: 700px) {\n    overflow: none;\n    gap: 30px;\n  }\n`","import styled from \"styled-components\";\nimport { CategoryItemActiveType } from \"./type\";\n \nexport const Label =  styled.label<CategoryItemActiveType>`\n  color: ${({ theme, active }) => active ? theme.colors.primary : theme.textColor.caption}; \n  cursor: pointer; \n`;\n\nexport const Wrapper = styled.div<CategoryItemActiveType>` \n  cursor: pointer; \n  display: flex;\n  align-items: center;\n  gap:10px;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 27px;  \n  color: ${props => props.theme.textColor.title};\n  border-bottom: 4px solid ${({ theme, active }) => active ? theme.colors.primary : theme.textColor.caption};\n  padding-bottom: 10px;\n  \n`;","import { CategoryItemType } from \"./type\"\nimport { Wrapper, Label } from './styled'\nimport { Icon } from \"../../../../components\"\nimport { useTheme } from \"styled-components\"\nimport { useFilters } from \"../../../../context/filters/useFilters\"\n\nexport const CategoryItem = ({ id, label, icon }: CategoryItemType) => {\n  const { state, updateFilters } = useFilters()\n\n  const { colors, textColor } = useTheme()\n  const isActive = state.categoryId === id\n\n  return (\n    <Wrapper onClick={() => updateFilters({ ...state, categoryId: id  })} active={isActive}>\n      <Icon name={icon} color={isActive ? colors.primary : textColor.caption } />\n      <Label className=\"d-none d-md-block\" active={isActive}>{label}</Label>\n    </Wrapper>\n  )\n}","import Http from \"./http\";\n\nexport const getAllCategories = async () => {\n  const { data } = await Http.get('/categories')\n\n  return data\n}","import { useQuery } from \"react-query\"\nimport { getAllCategories } from \"../../../../../services/categories\"\n\nconst CategoryFactory = () => {\n  const { data: categories, isLoading, isError } = useQuery(['categories'], () => getAllCategories(), {\n    refetchIntervalInBackground: false,\n    refetchOnWindowFocus: false\n   })\n\n  return {\n    categories,\n    isLoading,\n    isError\n  }\n}\n\nexport default CategoryFactory","import { Wrapper } from './styled' \nimport { CategoryItem } from '../CategoryItem' \nimport { CategoryType } from './type'\n\nimport CategoryFactory from './factories/Category'\n \nexport const CategoryList = () => {\n  const { categories } = CategoryFactory()\n\n  const renderList = categories?.map((category: CategoryType) => (\n    <CategoryItem key={category.id} {...category} />\n  ))\n \n  return (\n    <Wrapper>\n      <CategoryItem key={0} id={``} label=\"Todos\" icon=\"FullList\" />\n      { renderList }\n    </Wrapper>\n  )\n}","import { useTranslation } from \"react-i18next\"\nimport { Main, PageContent, SearchBar, ProductList, SessionTitle } from \"../../components\"\nimport { CategoryList } from './components/CategoryList'\n\nconst Home = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Main>\n      <PageContent>\n        <SearchBar />\n        <SessionTitle\n          className=\"mt-4\"\n          title={t(\"pages.home.sections.categories.title\")}\n          caption={t(\"pages.home.sections.categories.description\")}\n        />\n        <CategoryList />\n        <ProductList />\n      </PageContent>\n    </Main>\n  )\n}\n \nexport default Home"],"names":["Wrapper","styled","Label","theme","active","colors","primary","textColor","caption","props","title","CategoryItem","id","label","icon","useFilters","state","updateFilters","useTheme","isActive","categoryId","onClick","name","color","className","getAllCategories","Http","data","useQuery","refetchIntervalInBackground","refetchOnWindowFocus","categories","isLoading","isError","CategoryList","CategoryFactory","renderList","map","category","t","useTranslation"],"sourceRoot":""}